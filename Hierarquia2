import pandas as pd
from collections import defaultdict

# Consultar os dados das tabelas
trabalhos_processos_query = """
SELECT nr_trabalho, cd_pmi, nm_pmi, nm_tip_pmi
FROM ptai.trabalhos_processos
"""
base_pmi_query = """
SELECT DISTINCT
    p.pmi_codigo,
    p.pmi_tipo_codigo,
    p.pmi_tipo,
    p.pmi_nome,
    p.pmi_item_asc
FROM riscometro.base_pmi p
"""

trabalhos_processos = pd.read_sql(trabalhos_processos_query, engine)
base_pmi = pd.read_sql(base_pmi_query, engine)

# Construir um dicionário de parent-child
parent_child = base_pmi[['pmi_item_asc', 'pmi_codigo']].dropna()

# Função para obter todos os descendentes
def get_descendants(df):
    descendants = defaultdict(set)
    for parent, child in zip(df['pmi_item_asc'], df['pmi_codigo']):
        descendants[parent].add(child)
    return descendants

descendants_map = get_descendants(parent_child)

# Função para construir todas as hierarquias
def build_all_hierarchies(descendants_map, base_pmi):
    hierarchy_map = {}
    for pmi_codigo in base_pmi['pmi_codigo'].unique():
        visited = set()
        stack = [pmi_codigo]
        hierarchy = []
        while stack:
            current = stack.pop()
            if current in visited:
                continue
            visited.add(current)
            nome = base_pmi.loc[base_pmi['pmi_codigo'] == current, 'pmi_nome'].iloc[0]
            hierarchy.append(nome)
            children = descendants_map.get(current, [])
            stack.extend(children)
        hierarchy_map[pmi_codigo] = hierarchy[1:]  # Excluir o próprio processo se necessário
    return hierarchy_map

hierarchy_map = build_all_hierarchies(descendants_map, base_pmi)

# Mapear as hierarquias e nomes de processo para trabalhos_processos
trabalhos_processos['processo_nome'] = trabalhos_processos['cd_pmi'].map(
    base_pmi.set_index('pmi_codigo')['pmi_nome']
)

trabalhos_processos['subprocessos'] = trabalhos_processos['cd_pmi'].map(hierarchy_map)

# Preencher subprocessos vazios com uma lista vazia
trabalhos_processos['subprocessos'] = trabalhos_processos['subprocessos'].apply(
    lambda x: x if isinstance(x, list) else []
)

# Construir o resultado final
trabalhos_processos['processos'] = "Processos: " + trabalhos_processos['processo_nome'] + \
    ", Subprocessos: " + trabalhos_processos['subprocessos'].apply(', '.join)

df_processos = trabalhos_processos.groupby('nr_trabalho')['processos'].agg(' | '.join).reset_index()

