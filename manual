<p-toast></p-toast>

<div class="dropdown-container">
  <p-dropdown
    [options]="trabalhos"
    [(ngModel)]="selectedTrabalho"
    placeholder="Selecione um trabalho"
    [filter]="true"
    filterPlaceholder="Pesquisar trabalho"
    [showClear]="true"
    (onChange)="onTrabalhoChange($event.value)"
  ></p-dropdown>
</div>

<div class="chat-container">
  <!-- Área de mensagens -->
  <div class="messages" #messageContainer>
    <div
      *ngFor="let msg of messages"
      [ngClass]="{
        'user-message': msg.role === 'user',
        'assistant-message': msg.role === 'assistant'
      }"
    >
      <p-card styleClass="message-card" [style]="{ 'margin-bottom': '1rem' }">
        <ng-container>
          <span *ngIf="msg.role === 'user'">
            <i class="pi pi-user" style="margin-right: .5rem;"></i>
            Você:
          </span>
          <span *ngIf="msg.role === 'assistant'">
            <i class="pi pi-android" style="margin-right: .5rem;"></i>
            Assistente:
          </span>
          <br />
          <span>{{ msg.content }}</span>
        </ng-container>
      </p-card>
    </div>
  </div>

  <!-- Indicador de carregamento enquanto espera resposta -->
  <div class="loading-indicator" *ngIf="loading">
    <p-progressSpinner></p-progressSpinner>
    <span style="margin-left: 8px;">Aguardando resposta...</span>
  </div>

  <!-- Barra de input e botão de enviar -->
  <div class="input-bar">
    <textarea
      #textarea
      [(ngModel)]="userMessage"
      placeholder="Digite sua mensagem..."
      (input)="adjustTextArea($event)"
      (keydown)="handleEnterKey($event)"
      [disabled]="!selectedTrabalho"
      rows="1"
      class="chat-textarea"
    ></textarea>

    <div class="input-action">
      <i
        class="pi pi-send"
        (click)="sendMessage()"
        [ngClass]="{ 'disabled': !selectedTrabalho || userMessage.trim().length === 0 || loading }"
      ></i>
    </div>
  </div>
</div>
import { Component } from '@angular/core';
import { MessageService } from 'primeng/api';

@Component({
  selector: 'app-chat',
  templateUrl: './chat.component.html',
  styleUrls: ['./chat.component.css'],
  providers: [MessageService], // Adicione o serviço como provedor
})
export class ChatComponent {
  // Suas variáveis existentes
  sessionId = '12345';
  userMessage = '';
  selectedTrabalho: number | null = null;
  loading = false;

  constructor(private messageService: MessageService) {}

  // Método para exibir notificações
  showNotification(severity: string, summary: string, detail: string) {
    this.messageService.add({ severity, summary, detail });
  }

  // Exemplo de uso no método sendMessage
  sendMessage(): void {
    const trimmedMessage = this.userMessage.trim();

    if (!this.selectedTrabalho) {
      this.showNotification('warn', 'Atenção', 'Selecione um trabalho antes de enviar uma mensagem.');
      return;
    }

    if (!trimmedMessage) {
      this.showNotification('warn', 'Atenção', 'Digite uma mensagem antes de enviar.');
      return;
    }

    this.loading = true;
    this.showNotification('info', 'Enviando', 'Sua mensagem está sendo processada.');

    // Simulação de envio (substitua pelo seu serviço real)
    setTimeout(() => {
      this.showNotification('success', 'Sucesso', 'Mensagem enviada com sucesso.');
      this.loading = false;
      this.userMessage = '';
    }, 2000);
  }
}
onTrabalhoChange(nr_trabalho: number): void {
  console.log(`Trabalho selecionado: ${nr_trabalho}`);

  this.service.getTrabalhoDetails(nr_trabalho).subscribe({
    next: (response) => {
      console.log('Detalhes do trabalho:', response[0]);
      this.showNotification('info', 'Trabalho Selecionado', `Trabalho ${nr_trabalho} carregado com sucesso.`);

      this.service.resetSession(this.sessionId).subscribe({
        next: () => {
          console.log('Sessão resetada com sucesso.');
          this.showNotification('info', 'Sessão Resetada', 'Sessão foi resetada.');

          this.service.sendMessage(
            this.sessionId,
            '',
            response[0].role_user,
            response[0].role_assistant
          ).subscribe({
            next: () => {
              this.showNotification('success', 'Sessão Inicializada', 'Pronto para interagir.');
            },
            error: (err) => {
              this.showNotification('error', 'Erro', 'Erro ao inicializar sessão.');
              console.error(err);
            },
          });
        },
        error: (err) => {
          this.showNotification('error', 'Erro', 'Erro ao resetar a sessão.');
          console.error(err);
        },
      });
    },
    error: (err) => {
      this.showNotification('error', 'Erro', 'Erro ao carregar detalhes do trabalho.');
      console.error(err);
    },
  });
}
sendMessage(): void {
  const trimmedMessage = this.userMessage.trim();

  if (!this.selectedTrabalho) {
    this.showNotification('warn', 'Atenção', 'Selecione um trabalho antes de enviar uma mensagem.');
    return;
  }

  if (!trimmedMessage) {
    this.showNotification('warn', 'Atenção', 'Digite uma mensagem antes de enviar.');
    return;
  }

  // Adiciona a mensagem do usuário ao histórico
  this.messages.push({ role: 'user', content: trimmedMessage });

  // Limpa o campo de input e redefine a altura da textarea
  this.userMessage = '';
  this.resetTextAreaHeight(); // Garante que o textarea volte para a altura padrão

  this.loading = true;
  this.showNotification('info', 'Enviando', 'Sua mensagem está sendo processada.');

  // Chama o serviço para enviar a mensagem ao backend
  this.service.sendMessage(this.sessionId, trimmedMessage).subscribe({
    next: (response) => {
      // Adiciona a resposta do assistente ao histórico
      this.messages.push({ role: 'assistant', content: response.answer });
      this.loading = false;

      this.showNotification('success', 'Sucesso', 'Mensagem enviada com sucesso.');
      this.scrollToBottom();
    },
    error: (err) => {
      console.error('Erro ao processar mensagem:', err);
      this.loading = false;

      // Exibe uma mensagem de erro para o usuário
      this.showNotification('error', 'Erro', 'Erro ao processar sua mensagem. Por favor, tente novamente mais tarde.');

      // Adiciona uma mensagem de erro ao histórico
      this.messages.push({
        role: 'assistant',
        content: 'Erro ao processar sua mensagem. Por favor, tente novamente mais tarde.',
      });

      this.scrollToBottom();
    },
  });
}
Serviço de Notificação
Crie o método showNotification para reutilizar facilmente notificações no componente:

showNotification(severity: string, summary: string, detail: string): void {
  this.messageService.add({ severity, summary, detail });
}

Alteração no Template
Certifique-se de que o componente <p-toast> esteja presente no template HTML:

html
Copiar código

<p-toast></p-toast>
<div class="chat-container">
  <!-- Restante do código do chat -->
</div>
