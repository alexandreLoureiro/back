ALTER TABLE ptai.com_resultado_tx_completo 
ALTER COLUMN pontos_positivo TYPE JSONB USING 
  (SELECT array_to_json(array_agg(trim(regexp_replace(item, '^\d+\)\s*', ''))))
   FROM regexp_split_to_table(pontos_positivo, ',') AS item);

ALTER TABLE ptai.com_resultado_tx_completo 
ALTER COLUMN pontos_aprimorar TYPE JSONB USING
  (SELECT array_to_json(array_agg(trim(regexp_replace(item, '^\d+\)\s*', ''))))
   FROM regexp_split_to_table(pontos_aprimorar, ',') AS item);

# Após obter o DataFrame do PostgreSQL
for idx, row in df.iterrows():
    # Converte pontos_positivo de string para lista
    if pd.notna(row['pontos_positivo']):
        pontos_positivo_str = row['pontos_positivo']
        # Regex para extrair os pontos numerados
        import re
        pontos_positivo_list = [item.strip() for item in re.split(r'\d+\)\s*', pontos_positivo_str) if item.strip()]
        df.at[idx, 'pontos_positivo'] = pontos_positivo_list
    
    # Converte pontos_aprimorar de string para lista
    if pd.notna(row['pontos_aprimorar']):
        pontos_aprimorar_str = row['pontos_aprimorar']
        pontos_aprimorar_list = [item.strip() for item in re.split(r'\d+\)\s*', pontos_aprimorar_str) if item.strip()]
        df.at[idx, 'pontos_aprimorar'] = pontos_aprimorar_list


# Diagnóstico
print("Estrutura do evento a ser enviado:")
print(json.dumps(evento_processado, indent=2, ensure_ascii=False))

# Verificar se há problemas de serialização
try:
    json_test = json.dumps(evento_processado)
    print("Serialização JSON bem-sucedida")
except Exception as e:
    print(f"Erro ao serializar para JSON: {e}")
    
# Verificar conteúdo específico dos campos problemáticos
print(f"Tipo de pontos_positivo: {type(evento_processado.get('pontos_positivo'))}")
print(f"Valor de pontos_positivo: {evento_processado.get('pontos_positivo')}")
print(f"Tipo de pontos_aprimorar: {type(evento_processado.get('pontos_aprimorar'))}")
print(f"Valor de pontos_aprimorar: {evento_processado.get('pontos_aprimorar')}")


---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In[20], line 8
      6     # Regex para extrair os pontos numerados
      7     import re
----> 8     pontos_positivo_list = [item.strip() for item in re.split(r'\d+\)\s*', pontos_positivo_str) if item.strip()]
      9     df.at[idx, 'pontosPositivo'] = pontos_positivo_list
     11 # Converte pontos_aprimorar de string para lista

File /usr/local/lib/python3.9/re.py:231, in split(pattern, string, maxsplit, flags)
    223 def split(pattern, string, maxsplit=0, flags=0):
    224     """Split the source string by the occurrences of the pattern,
    225     returning a list containing the resulting substrings.  If
    226     capturing parentheses are used in pattern, then the text of all
   (...)
    229     and the remainder of the string is returned as the final element
    230     of the list."""
--> 231     return _compile(pattern, flags).split(string, maxsplit)

TypeError: expected string or bytes-like object


