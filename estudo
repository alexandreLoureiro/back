@router.get("/apiptai/rcmkpmg/{relatorio_id}")
async def get_relatorio_rcm(relatorio_id: int):
    query = """
    SELECT pdf_file, relatorio, data_emissao, constatacoes, recomendacao
    FROM rcm.rcm_relatorios
    WHERE id = $1;
    """
    resultado = await execute_query(query, relatorio_id, return_one=True)
    if not resultado:
        return {"erro": "Relatório não encontrado"}
    
    pdf_bytes = resultado['pdf_file']  # isto deve ser um campo BYTEA (bytes)

    # Abordagem 1: Retornar de uma vez só usando Response
    return Response(content=pdf_bytes, media_type="application/pdf")

    # Abordagem 2: Usar StreamingResponse
    # return StreamingResponse(
    #     io.BytesIO(pdf_bytes),
    #     media_type="application/pdf"
    # )

import { Component, ViewChild, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FileUpload, FileUploadModule } from 'primeng/fileupload';
import { ButtonModule } from 'primeng/button';
import { MessageService, MenuItem } from 'primeng/api';
import { ToastModule } from 'primeng/toast';
import { TableModule } from 'primeng/table';
import { StepsModule } from 'primeng/steps';
import { RouterModule } from '@angular/router';
import * as XLSX from 'xlsx';
import { ServicoLLMService } from '../servico-llm.service';

export interface RcmRelatorio {
  id: number;
  relatorio: string;
  data_emissao: string | null;
  constatacoes: string;
  recomendacoes: string;
}

@Component({
  selector: 'app-rcmexcel',
  standalone: true,
  imports: [
    CommonModule,
    FileUploadModule,
    ButtonModule,
    ToastModule,
    TableModule,
    StepsModule, RouterModule
  ],
  providers: [ServicoLLMService, MessageService],
  templateUrl: './rcmexcel.component.html',
  styleUrls: ['./rcmexcel.component.css']
})
export class RcmexcelComponent implements OnInit {
  excelFile: File | null = null;
  pdfFiles: File[] = [];
  relatoriosExcel: string[] = [];
  rcmRelatorios: RcmRelatorio[] = [];

  @ViewChild('excelUploader') excelUploader!: FileUpload;
  @ViewChild('pdfUploader') pdfUploader!: FileUpload;

  lastUploadedExcel: string | null = null;
  lastUploadedPdfs: string[] = [];

  steps: MenuItem[] = [];
  activeStep: number = 0;

  colunasObrigatorias = [
    'RELATORIO',
    'DATA_EMISSAO',
    'CONSTATACAO',
    'EVIDENCIAS',
    'RECOMENDACAO',
    'INSTITUICAO_RESPONSAVEL',
    'PREFIXO_RESPONSAVEL',
    'INSTITUICAO_ASSUNTO_ELBB',
    'PREVISAO_IMPLEMENTACAO',
    'MATRICULA_DO_GESTOR_RESPONSAVEL'
  ];

  constructor(
    private messageService: MessageService,
    private servicoLLM: ServicoLLMService
  ) {}

  ngOnInit() {
    this.steps = [
      { label: 'Excel KPMG' },
      { label: 'Selecione os Relatórios' },
      { label: 'Upload Recomendações KPMG' }
    ];
    this.getRmcKpmg();
  }

  get pdfFilesNames(): string {
    return this.pdfFiles.map(f => f.name).join(', ');
  }

  onSelectExcel(event: any) {
    if (event.files && event.files.length) {
      const file = event.files[0];
      this.excelFile = file;
      this.lerExcel(file);
      this.activeStep = 1;
    }
  }

  onClearExcel() {
    this.excelFile = null;
    this.relatoriosExcel = [];
  }

  onSelectPDF(event: any) {
    this.pdfFiles = [...this.pdfFiles, ...event.files];
    console.log('PDFs selecionados:', this.pdfFiles.map(f => f.name));
    if (this.pdfFiles.length >= this.relatoriosExcel.length) {
      this.activeStep = 2;
    }
  }

  onClearPDF() {
    this.pdfFiles = [];
  }

  lerExcel(file: File) {
    const reader = new FileReader();
    reader.onload = (e: any) => {
      const data = new Uint8Array(e.target.result);
      const workbook = XLSX.read(data, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const jsonData: any[] = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
      if (!jsonData || !jsonData.length) {
        this.messageService.add({
          severity: 'warn',
          summary: 'Planilha vazia',
          detail: 'Não há dados.'
        });
        return;
      }
      const cabecalho: string[] = jsonData[0].map((val: any) => val?.toString().trim());
      for (const col of this.colunasObrigatorias) {
        if (!cabecalho.includes(col)) {
          this.messageService.add({
            severity: 'error',
            summary: 'Coluna faltando',
            detail: `Coluna "${col}" não encontrada na planilha.`
          });
          this.excelFile = null;
          return;
        }
      }
      const dataObjects = XLSX.utils.sheet_to_json(worksheet, {
        defval: '',
        header: cabecalho,
        range: 1
      });
      const relSet = new Set<string>();
      (dataObjects as any[]).forEach(row => {
        if (row['RELATORIO']) {
          relSet.add(row['RELATORIO'].toString().trim());
        }
      });
      this.relatoriosExcel = Array.from(relSet);
      if (this.relatoriosExcel.length > 1) {
        this.messageService.add({
          severity: 'warn',
          summary: 'Vários RELATORIO',
          detail: `Planilha tem ${this.relatoriosExcel.length} valores distintos.`
        });
      }
      console.log('Relatórios Excel:', this.relatoriosExcel);
    };
    reader.readAsArrayBuffer(file);
  }

  enviarArquivosExcel() {
    if (!this.excelFile) {
      this.messageService.add({
        severity: 'warn',
        summary: 'Aviso',
        detail: 'Selecione a planilha Excel.'
      });
      return;
    }
    if (!this.pdfFiles.length) {
      this.messageService.add({
        severity: 'warn',
        summary: 'Aviso',
        detail: 'Selecione os PDFs.'
      });
      return;
    }
    if (this.pdfFiles.length < this.relatoriosExcel.length) {
      this.messageService.add({
        severity: 'error',
        summary: 'Faltam PDFs',
        detail: `Você tem ${this.relatoriosExcel.length} relatórios distintos, mas apenas ${this.pdfFiles.length} PDFs.`
      });
      return;
    }
    for (const relatorio of this.relatoriosExcel) {
      const pdfEncontrado = this.pdfFiles.some(pdf => {
        const nameNoExt = pdf.name.replace('.pdf', '').trim();
        return nameNoExt === relatorio;
      });
      if (!pdfEncontrado) {
        this.messageService.add({
          severity: 'error',
          summary: 'Nome divergente',
          detail: `Relatório "${relatorio}" não tem PDF correspondente.`
        });
        return;
      }
    }
    this.servicoLLM.uploadExcelMultiplosPdfs(this.excelFile, this.pdfFiles)
      .subscribe({
        next: (res) => {
          console.log('Resposta do backend:', res);
          if (this.excelFile) {
            this.lastUploadedExcel = this.excelFile.name;
          }
          this.lastUploadedPdfs = this.pdfFiles.map(pdf => pdf.name);
          this.excelFile = null;
          this.pdfFiles = [];
          this.relatoriosExcel = [];
          this.excelUploader.clear();
          this.pdfUploader.clear();
          this.messageService.add({
            severity: 'success',
            summary: 'Sucesso',
            detail: 'Excel e PDFs enviados com sucesso!'
          });
          this.getRmcKpmg();
        },
        error: (err: any) => {
          console.error('Erro ao enviar Excel+PDFs:', err);
          this.messageService.add({
            severity: 'error',
            summary: 'Erro',
            detail: err.error?.detail || err.message || 'Falha no upload.'
          });
        }
      });
  }

  getRmcKpmg() {
    this.servicoLLM.listarRelatoriosRcm().subscribe({
      next: (lista) => {
        this.rcmRelatorios = lista.map(item => ({
          ...item,
          relatorio: item.nome
        }));
      },
      error: (err) => {
        console.error('Erro ao buscar relatórios RCM:', err);
      }
    });
  }

  downloadRelatorio(relatorioId: number): void {
    const url = this.servicoLLM.getPdfUrl(relatorioId);
    window.open(url, '_blank');
  }

  deletarRelatorio(id: number) {
    // Chame o serviço que exclui o registro.
    // Supondo que o seu serviço tenha um método deletarRelatorioRCM que retorna um Observable.
    this.servicoLLM.deletarRelatorioRCM(id).subscribe({
      next: (res) => {
        this.messageService.add({
          severity: 'success',
          summary: 'Deletado',
          detail: 'Registro deletado com sucesso!'
        });
        // Atualiza a lista de registros
        this.getRmcKpmg();
      },
      error: (err) => {
        console.error('Erro ao deletar o registro:', err);
        this.messageService.add({
          severity: 'error',
          summary: 'Erro',
          detail: 'Falha ao deletar o registro.'
        });
      }
    });
  }

}

    <p-table
      #dt
      [value]="rcmRelatorios"
      [paginator]="true"
      [rows]="5"
      [globalFilterFields]="['relatorio','data_emissao','constatacoes','recomendacoes']"
      sortMode="multiple"
      [responsiveLayout]="'scroll'"
    >
      <ng-template pTemplate="header">
        <tr style="font-size: 0.7rem;">
          <th pSortableColumn="relatorio">
            Relatório
            <p-sortIcon field="relatorio"></p-sortIcon>
          </th>
          <th pSortableColumn="data_emissao">
            Data Emissão
            <p-sortIcon field="data_emissao"></p-sortIcon>
          </th>
          <th pSortableColumn="constatacoes">
            Constatações
            <p-sortIcon field="constatacoes"></p-sortIcon>
          </th>
          <th pSortableColumn="recomendacoes">
            Recomendações
            <p-sortIcon field="recomendacoes"></p-sortIcon>
          </th>
          <th style="text-align: center;">Ações</th>
        </tr>
      </ng-template>

      <ng-template pTemplate="body" let-rel>
        <tr style="font-size: 0.7rem;">
          <td>{{ rel.relatorio }}</td>
          <td>{{ rel.data_emissao }}</td>
          <td>{{ rel.constatacoes }}</td>
          <td>{{ rel.recomendacoes }}</td>
          <td style="text-align: center;">
            <!-- Botão de excluir -->
            <button pButton type="button" icon="pi pi-trash" style="font-size: 0.7rem; padding: 0.3rem" (click)="deletarRelatorio(rel.id)"></button>
            <!-- Botão de detalhes -->
            <button
              pButton
              type="button"
              label="Detalhes"
              style="font-size: 0.7rem; padding: 0.3rem 0.5rem; margin-left: 0.3rem"
              [routerLink]="['/chatdetalhe', rel.id]"
            ></button>
            <!-- Botão de download -->
            <button
              pButton
              type="button"
              label="Download"
              style="font-size: 0.7rem; padding: 0.3rem 0.5rem; margin-left: 0.3rem"
              (click)="downloadRelatorio(rel.id)"
            ></button>
          </td>
        </tr>
      </ng-template>
    </p-table>
  </div>

getPdfUrl(relatorioId: number): string {
  return `${this.API_ptai}/rcmkpmg/${relatorioId}`;
}

deletarRelatorioRCM(id: number): Observable<any> {
  const url = `${this.API_ptai}/deletar_rcm_relatorio/${id}`;
  return this.http.delete(url).pipe(
    catchError((error) => {
      console.error('Erro ao deletar relatório:', error);
      return throwError(() => error);
    })
  );
}
