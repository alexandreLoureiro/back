quando fui inserir os dados no meu banco de dados postgres latin1 deu o erro

código:
df_resultados.to_sql(
            name=table_name,
            con=engine,
            schema=schema_name,
            if_exists='append',  # ou 'append'
            index=False
        )
        logging.info(f"Processamento concluído. {len(resultados)} registros inseridos no banco de dados.")
    except Exception as e:
        logging.error(f"Erro ao inserir dados no PostgreSQL: {e}")

erro:

Processando linhas: 100%|██████████| 1/1 [00:08<00:00,  8.79s/it]
ERROR:root:Erro ao inserir dados no PostgreSQL: (psycopg2.errors.DatatypeMismatch) column "pontos_positivo" is of type jsonb but expression is of type text[]
LINE 5: ...o do Brasil requer aprimoramentos estruturantes', ARRAY['Ini...
                                                             ^
HINT:  You will need to rewrite or cast the expression.

[SQL: INSERT INTO destaques.gpt_destaques2 (nr_trabalho, ano, nm_trab, obj_trab, justif, processo_avaliado, hierarquia_processo, evento_rsco_avaliado, hierarquia_evento_risco, tx_rel_atvd, tx_constatacao, rel_hash, ocorrencia_concat, rcm_concat, combined_text, titulo, pont




ALTER TABLE ptai.com_resultado_tx_completo 
ALTER COLUMN pontos_positivo TYPE JSONB USING 
  (SELECT array_to_json(array_agg(trim(regexp_replace(item, '^\d+\)\s*', ''))))
   FROM regexp_split_to_table(pontos_positivo, ',') AS item);

ALTER TABLE ptai.com_resultado_tx_completo 
ALTER COLUMN pontos_aprimorar TYPE JSONB USING
  (SELECT array_to_json(array_agg(trim(regexp_replace(item, '^\d+\)\s*', ''))))
   FROM regexp_split_to_table(pontos_aprimorar, ',') AS item);

# Após obter o DataFrame do PostgreSQL
for idx, row in df.iterrows():
    # Converte pontos_positivo de string para lista
    if pd.notna(row['pontos_positivo']):
        pontos_positivo_str = row['pontos_positivo']
        # Regex para extrair os pontos numerados
        import re
        pontos_positivo_list = [item.strip() for item in re.split(r'\d+\)\s*', pontos_positivo_str) if item.strip()]
        df.at[idx, 'pontos_positivo'] = pontos_positivo_list
    
    # Converte pontos_aprimorar de string para lista
    if pd.notna(row['pontos_aprimorar']):
        pontos_aprimorar_str = row['pontos_aprimorar']
        pontos_aprimorar_list = [item.strip() for item in re.split(r'\d+\)\s*', pontos_aprimorar_str) if item.strip()]
        df.at[idx, 'pontos_aprimorar'] = pontos_aprimorar_list


# Diagnóstico
print("Estrutura do evento a ser enviado:")
print(json.dumps(evento_processado, indent=2, ensure_ascii=False))

# Verificar se há problemas de serialização
try:
    json_test = json.dumps(evento_processado)
    print("Serialização JSON bem-sucedida")
except Exception as e:
    print(f"Erro ao serializar para JSON: {e}")
    
# Verificar conteúdo específico dos campos problemáticos
print(f"Tipo de pontos_positivo: {type(evento_processado.get('pontos_positivo'))}")
print(f"Valor de pontos_positivo: {evento_processado.get('pontos_positivo')}")
print(f"Tipo de pontos_aprimorar: {type(evento_processado.get('pontos_aprimorar'))}")
print(f"Valor de pontos_aprimorar: {evento_processado.get('pontos_aprimorar')}")


