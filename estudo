// rcm-relatorio.model.ts (ou algo similar)
export interface RcmRelatorio {
  id: number;
  nome: string;
  data: string;          // ou Date, dependendo de como você trabalha
  constatacoes: string;
  recomendacoes: string;
}

import { Component, OnInit, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Table, TableModule } from 'primeng/table';
import { PaginatorModule } from 'primeng/paginator';
import { ButtonModule } from 'primeng/button';
import { CheckboxModule } from 'primeng/checkbox';
import { InputTextModule } from 'primeng/inputtext';
import { RcmRelatorio } from './rcm-relatorio.model'; // a interface
import { ServicoLLMService } from '../servico-llm.service'; // ajuste o caminho
import { FormsModule } from '@angular/forms'; // Para o [(ngModel)] no filtro global

@Component({
  selector: 'app-rcm-list',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    TableModule,
    PaginatorModule,
    ButtonModule,
    CheckboxModule,
    InputTextModule
  ],
  templateUrl: './rcm-list.component.html'
})
export class RcmListComponent implements OnInit {
  relatorios: RcmRelatorio[] = [];
  selectedRelatorios: RcmRelatorio[] = [];

  // Para o filtro global (opcional)
  globalFilter: string = '';

  // Captura a referência da tabela para acionar o filter manual
  @ViewChild('dt') dt!: Table;

  constructor(private servicoLLM: ServicoLLMService) {}

  ngOnInit() {
    this.carregarRelatorios();
  }

  carregarRelatorios() {
    // Exemplo: supõe que seu serviço retorne um Observable<RcmRelatorio[]>
    this.servicoLLM.listarRelatorios().subscribe({
      next: (lista) => {
        this.relatorios = lista;
      },
      error: (err) => {
        console.error('Erro ao carregar relatórios:', err);
      }
    });
  }

  // Chamado ao clicar no botão "excluir"
  excluirRelatorio(id: number) {
    if (!confirm('Tem certeza que deseja excluir este relatório?')) {
      return;
    }
    // Chama o serviço para deletar no backend
    this.servicoLLM.excluirRelatorio(id).subscribe({
      next: () => {
        // Remove do array local
        this.relatorios = this.relatorios.filter(r => r.id !== id);
      },
      error: (err) => {
        console.error('Erro ao excluir relatório:', err);
      }
    });
  }

  // Se quiser um "filtro global" manual, pode usar esse método
  filtrarGlobal(event: any) {
    const valor = event.target.value;
    this.dt.filterGlobal(valor, 'contains');
  }
}

listarRelatorios(): Observable<RcmRelatorio[]> {
  return this.http.get<RcmRelatorio[]>(`${this.API_ptai}/rcmkpmg`);
}

excluirRelatorio(id: number): Observable<any> {
  return this.http.delete(`${this.API_ptai}/rcmkpmg/${id}`);
}

<div class="card">
  <h2>Relatórios RCM</h2>

  <!-- Filtro global -->
  <div style="text-align: right; margin-bottom: .5rem;">
    <i class="pi pi-search" style="margin-right: 4px;"></i>
    <input
      #gb
      type="text"
      pInputText
      placeholder="Filtrar..."
      (input)="dt.filterGlobal(gb.value, 'contains')"
    />
  </div>

  <!-- Tabela p-table -->
  <p-table
    #dt
    [value]="relatorios"
    [paginator]="true"
    [rows]="5"
    selectionMode="checkbox"
    [(selection)]="selectedRelatorios"
    [globalFilterFields]="['nome','data','constatacoes','recomendacoes']"
    dataKey="id"
  >

    <!-- Cabeçalho -->
    <ng-template pTemplate="header">
      <tr>
        <!-- Checkbox select-all -->
        <th style="width: 3em">
          <p-tableHeaderCheckbox></p-tableHeaderCheckbox>
        </th>
        <th pSortableColumn="id">ID <p-sortIcon field="id"></p-sortIcon></th>
        <th pSortableColumn="nome">Nome <p-sortIcon field="nome"></p-sortIcon></th>
        <th pSortableColumn="data">Data <p-sortIcon field="data"></p-sortIcon></th>
        <th pSortableColumn="constatacoes">Constatações <p-sortIcon field="constatacoes"></p-sortIcon></th>
        <th pSortableColumn="recomendacoes">Recomendações <p-sortIcon field="recomendacoes"></p-sortIcon></th>
        <th>Ações</th>
      </tr>
    </ng-template>

    <!-- Corpo da tabela -->
    <ng-template pTemplate="body" let-relatorio>
      <tr>
        <td>
          <p-tableCheckbox [value]="relatorio"></p-tableCheckbox>
        </td>
        <td>{{ relatorio.id }}</td>
        <td>{{ relatorio.nome }}</td>
        <td>{{ relatorio.data }}</td>
        <td>{{ relatorio.constatacoes }}</td>
        <td>{{ relatorio.recomendacoes }}</td>
        <td>
          <button
            pButton
            icon="pi pi-trash"
            class="p-button-rounded p-button-danger"
            (click)="excluirRelatorio(relatorio.id)"
            title="Excluir"
          ></button>
        </td>
      </tr>
    </ng-template>
  </p-table>
</div>



