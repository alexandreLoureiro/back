from fastapi import APIRouter, File, UploadFile, HTTPException, Form
import pandas as pd
import os

router = APIRouter()

@router.post("/apiptai/upload-rcm-excel-pdf")
async def upload_rcm_excel_pdf(
    file_pdf: UploadFile = File(...),
    file_excel: UploadFile = File(...),
):
    # 1) Validar extensão do PDF
    if not file_pdf.filename.lower().endswith(".pdf"):
        raise HTTPException(status_code=400, detail="O arquivo PDF não possui extensão .pdf")

    # 2) Ler o arquivo Excel em memória
    if not (file_excel.filename.lower().endswith(".xlsx") or file_excel.filename.lower().endswith(".xls")):
        raise HTTPException(status_code=400, detail="O arquivo de Excel deve ser .xlsx ou .xls")

    # Lê o Excel para dataframe
    contents_excel = await file_excel.read()
    df = pd.read_excel(contents_excel)

    # 3) Validar colunas obrigatórias (exemplo)
    colunas_obrigatorias = [
        "RELATORIO", "DATA_EMISSAO", "CONSTATACAO", "EVIDENCIAS", "RECOMENDACAO",
        "INSTITUICAO_RESPONSAVEL", "PREFIXO_RESPONSAVEL", "INSTITUICAO_ASSUNTO_ELBB",
        "PREVISAO_IMPLEMENTACAO", "MATRICULA_DO_GESTOR_RESPONSAVEL"
    ]
    for col in colunas_obrigatorias:
        if col not in df.columns:
            raise HTTPException(status_code=400, detail=f"Coluna obrigatória '{col}' não encontrada no Excel.")

    # 4) Verificar os valores da coluna RELATORIO
    valores_relatorio = df["RELATORIO"].unique()  # array de valores únicos
    if len(valores_relatorio) == 0:
        raise HTTPException(status_code=400, detail="A planilha não possui valores na coluna RELATORIO.")

    # Regra de ter APENAS UM valor de RELATORIO distinto
    if len(valores_relatorio) > 1:
        # Dependendo da sua regra, pode permitir ou rejeitar
        raise HTTPException(
            status_code=400,
            detail=f"Existem {len(valores_relatorio)} valores de RELATORIO distintos. Envie planilhas separadas."
        )

    # 5) Comparar com o nome do PDF (sem extensão)
    relatorio_excel = valores_relatorio[0]  # ex.: "CCI BB – 30/06/2024"
    pdf_name_no_ext = file_pdf.filename.replace(".pdf", "")  # ex.: "CCI BB – 30/06/2024"

    if relatorio_excel.strip() != pdf_name_no_ext.strip():
        raise HTTPException(
            status_code=400,
            detail=(
                f"O valor de RELATORIO ('{relatorio_excel}') não coincide com o nome do PDF ('{pdf_name_no_ext}')."
            )
        )

    # 6) Se chegou até aqui, está tudo validado. Podemos salvar ambos os arquivos, se quiser.
    # Por exemplo, salvando em /code/app/uploads:
    upload_dir = "/code/app/uploads"
    if not os.path.exists(upload_dir):
        os.makedirs(upload_dir)

    # Salvar PDF
    pdf_path = os.path.join(upload_dir, file_pdf.filename)
    with open(pdf_path, "wb") as f:
        contents_pdf = await file_pdf.read()
        f.write(contents_pdf)

    # Salvar Excel
    excel_path = os.path.join(upload_dir, file_excel.filename)
    with open(excel_path, "wb") as f:
        f.write(contents_excel)

    # 7) Você pode processar as linhas do df e salvar no banco
    #    ou devolver um "preview" do que foi importado, etc.

    return {
        "status": "ok",
        "mensagem": "Upload realizado com sucesso!",
        "relatorio": relatorio_excel,
        "nome_pdf": pdf_name_no_ext,
        "total_linhas_excel": len(df)
    }

<div style="max-width: 600px; margin: auto;">
  <h2>Upload RCM: Excel + PDF</h2>
  <!-- Upload do Excel -->
  <p-fileUpload
    #excelUploader
    name="excelFile"
    accept=".xls,.xlsx"
    customUpload="true"
    chooseLabel="Selecionar Excel"
    (uploadHandler)="onUploadExcel($event)">
  </p-fileUpload>

  <!-- Upload do PDF -->
  <p-fileUpload
    #pdfUploader
    name="pdfFile"
    accept=".pdf"
    customUpload="true"
    chooseLabel="Selecionar PDF"
    (uploadHandler)="onUploadPDF($event)">
  </p-fileUpload>

  <!-- Botão Enviar para mandar ambos juntos -->
  <button pButton label="Enviar Tudo" (click)="enviarArquivos()"></button>
</div>

import { Component } from '@angular/core';
import { FileUploadModule } from 'primeng/fileupload';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-rcm-upload',
  standalone: true,
  imports: [FileUploadModule],
  templateUrl: './rcm-upload.component.html'
})
export class RcmUploadComponent {
  selectedExcelFile: File | null = null;
  selectedPdfFile: File | null = null;

  constructor(private http: HttpClient) {}

  onUploadExcel(event: any) {
    // O PrimeNG fileUpload manda "event.files" com o(s) arquivo(s)
    const file = event.files ? event.files[0] : null;
    if (file) {
      this.selectedExcelFile = file;
    }
  }

  onUploadPDF(event: any) {
    const file = event.files ? event.files[0] : null;
    if (file) {
      this.selectedPdfFile = file;
    }
  }

  enviarArquivos() {
    if (!this.selectedExcelFile || !this.selectedPdfFile) {
      alert('Selecione ambos os arquivos (Excel e PDF) antes de enviar.');
      return;
    }
    
    const formData = new FormData();
    formData.append('file_excel', this.selectedExcelFile);
    formData.append('file_pdf', this.selectedPdfFile);

    // Ajuste a URL para seu endpoint FastAPI
    this.http.post('http://localhost:8000/apiptai/upload-rcm-excel-pdf', formData)
      .subscribe({
        next: (res) => {
          console.log('Retorno do servidor:', res);
          alert('Upload realizado com sucesso!');
        },
        error: (err) => {
          console.error('Erro no upload:', err);
          alert('Falha ao enviar arquivos: ' + (err.error?.detail || err.message));
        }
      });
  }
}




agora mudou, além do upload tem subir um arquivo excel que tem esses cabelalhos por exemplo

 RELATORIO 	 DATA_EMISSAO 	 CONSTATACAO 	 EVIDENCIAS 	 RECOMENDACAO 	 INSTITUICAO_RESPONSAVEL 	 PREFIXO_RESPONSAVEL 	 INSTITUICAO_ASSUNTO_ELBB 	 PREVISAO_IMPLEMENTACAO 	 MATRICULA_DO_GESTOR_RESPONSAVEL 

exemplo:
 RELATORIO 	 DATA_EMISSAO 	 CONSTATACAO 	 EVIDENCIAS 	 RECOMENDACAO 	 INSTITUICAO_RESPONSAVEL 	 PREFIXO_RESPONSAVEL 	 INSTITUICAO_ASSUNTO_ELBB 	 PREVISAO_IMPLEMENTACAO 	 MATRICULA_DO_GESTOR_RESPONSAVEL 
CCI BB – 30/06/2024	20/09/2024	teste	teste	teste	1	1000	1	28/02/2025	xxxxxx

a ideia é que faça o upload dessa planilha e junto faça o upload do relatório pdf que tem que ter o mesmo nome da coluna relatorio

se a planilha tiver mais de uma com relação diferente de relatório tem que criticar e possibilitar o envio de todos....






// rcm-relatorio.model.ts (ou algo similar)
export interface RcmRelatorio {
  id: number;
  nome: string;
  data: string;          // ou Date, dependendo de como você trabalha
  constatacoes: string;
  recomendacoes: string;
}

import { Component, OnInit, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Table, TableModule } from 'primeng/table';
import { PaginatorModule } from 'primeng/paginator';
import { ButtonModule } from 'primeng/button';
import { CheckboxModule } from 'primeng/checkbox';
import { InputTextModule } from 'primeng/inputtext';
import { RcmRelatorio } from './rcm-relatorio.model'; // a interface
import { ServicoLLMService } from '../servico-llm.service'; // ajuste o caminho
import { FormsModule } from '@angular/forms'; // Para o [(ngModel)] no filtro global

@Component({
  selector: 'app-rcm-list',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    TableModule,
    PaginatorModule,
    ButtonModule,
    CheckboxModule,
    InputTextModule
  ],
  templateUrl: './rcm-list.component.html'
})
export class RcmListComponent implements OnInit {
  relatorios: RcmRelatorio[] = [];
  selectedRelatorios: RcmRelatorio[] = [];

  // Para o filtro global (opcional)
  globalFilter: string = '';

  // Captura a referência da tabela para acionar o filter manual
  @ViewChild('dt') dt!: Table;

  constructor(private servicoLLM: ServicoLLMService) {}

  ngOnInit() {
    this.carregarRelatorios();
  }

  carregarRelatorios() {
    // Exemplo: supõe que seu serviço retorne um Observable<RcmRelatorio[]>
    this.servicoLLM.listarRelatorios().subscribe({
      next: (lista) => {
        this.relatorios = lista;
      },
      error: (err) => {
        console.error('Erro ao carregar relatórios:', err);
      }
    });
  }

  // Chamado ao clicar no botão "excluir"
  excluirRelatorio(id: number) {
    if (!confirm('Tem certeza que deseja excluir este relatório?')) {
      return;
    }
    // Chama o serviço para deletar no backend
    this.servicoLLM.excluirRelatorio(id).subscribe({
      next: () => {
        // Remove do array local
        this.relatorios = this.relatorios.filter(r => r.id !== id);
      },
      error: (err) => {
        console.error('Erro ao excluir relatório:', err);
      }
    });
  }

  // Se quiser um "filtro global" manual, pode usar esse método
  filtrarGlobal(event: any) {
    const valor = event.target.value;
    this.dt.filterGlobal(valor, 'contains');
  }
}

listarRelatorios(): Observable<RcmRelatorio[]> {
  return this.http.get<RcmRelatorio[]>(`${this.API_ptai}/rcmkpmg`);
}

excluirRelatorio(id: number): Observable<any> {
  return this.http.delete(`${this.API_ptai}/rcmkpmg/${id}`);
}

<div class="card">
  <h2>Relatórios RCM</h2>

  <!-- Filtro global -->
  <div style="text-align: right; margin-bottom: .5rem;">
    <i class="pi pi-search" style="margin-right: 4px;"></i>
    <input
      #gb
      type="text"
      pInputText
      placeholder="Filtrar..."
      (input)="dt.filterGlobal(gb.value, 'contains')"
    />
  </div>

  <!-- Tabela p-table -->
  <p-table
    #dt
    [value]="relatorios"
    [paginator]="true"
    [rows]="5"
    selectionMode="checkbox"
    [(selection)]="selectedRelatorios"
    [globalFilterFields]="['nome','data','constatacoes','recomendacoes']"
    dataKey="id"
  >

    <!-- Cabeçalho -->
    <ng-template pTemplate="header">
      <tr>
        <!-- Checkbox select-all -->
        <th style="width: 3em">
          <p-tableHeaderCheckbox></p-tableHeaderCheckbox>
        </th>
        <th pSortableColumn="id">ID <p-sortIcon field="id"></p-sortIcon></th>
        <th pSortableColumn="nome">Nome <p-sortIcon field="nome"></p-sortIcon></th>
        <th pSortableColumn="data">Data <p-sortIcon field="data"></p-sortIcon></th>
        <th pSortableColumn="constatacoes">Constatações <p-sortIcon field="constatacoes"></p-sortIcon></th>
        <th pSortableColumn="recomendacoes">Recomendações <p-sortIcon field="recomendacoes"></p-sortIcon></th>
        <th>Ações</th>
      </tr>
    </ng-template>

    <!-- Corpo da tabela -->
    <ng-template pTemplate="body" let-relatorio>
      <tr>
        <td>
          <p-tableCheckbox [value]="relatorio"></p-tableCheckbox>
        </td>
        <td>{{ relatorio.id }}</td>
        <td>{{ relatorio.nome }}</td>
        <td>{{ relatorio.data }}</td>
        <td>{{ relatorio.constatacoes }}</td>
        <td>{{ relatorio.recomendacoes }}</td>
        <td>
          <button
            pButton
            icon="pi pi-trash"
            class="p-button-rounded p-button-danger"
            (click)="excluirRelatorio(relatorio.id)"
            title="Excluir"
          ></button>
        </td>
      </tr>
    </ng-template>
  </p-table>
</div>


// servico-llm.service.ts (exemplo)
getPdfRcm(id: number): Observable<Blob> {
  const url = `${this.API_ptai}/rcmkpmg/${id}`;
  // Precisamos `responseType: 'blob'` para receber um Blob (PDF)
  return this.http.get(url, { responseType: 'blob' });
}
<th>PDF</th>
<!-- ... -->
<ng-template pTemplate="body" let-relatorio>
  <tr>
    <!-- ... outras colunas -->
    <td>
      <button
        pButton
        icon="pi pi-file-pdf"
        (click)="abrirPdf(relatorio.id)"
        label="Abrir PDF"
      ></button>
    </td>
  </tr>
</ng-template>
abrirPdf(id: number) {
  this.servicoLLM.getPdfRcm(id).subscribe({
    next: (pdfBlob) => {
      // Cria uma URL temporária para exibir o PDF
      const fileURL = URL.createObjectURL(pdfBlob);
      // Abre em uma nova aba
      window.open(fileURL, '_blank');
    },
    error: (err) => {
      console.error('Erro ao obter PDF:', err);
    }
  });
}







