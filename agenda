from fastapi import APIRouter, File, UploadFile, responses, HTTPException, Form
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles

from fastapi.responses import StreamingResponse, Response
from fastapi.responses import FileResponse

from fastapi.responses import FileResponse


from app.infra.sqlalchemy.dao.queries_rcm import tcu_upate_insert
from app.infra.sqlalchemy.config.conexoes import *
from app.infra.sqlalchemy.config.database_pool import pool, execute_query

from io import BytesIO
import re
import fitz  # PyMuPDF
import uuid  # Importe o módulo uuid aqui
import PyPDF2

from datetime import datetime, timedelta
from hashlib import sha256

import pdfkit as pdf

from pyvirtualdisplay import Display



import pandas as pd
import openpyxl
from openpyxl import load_workbook


from openpyxl.styles import colors, PatternFill

from openpyxl.utils import get_column_letter
from openpyxl.drawing.image import Image as ExcelImage

import xlsxwriter

from matplotlib.colors import rgb2hex
import matplotlib.pyplot as plt
from PIL import Image as PILImage
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas

from PIL import Image, ImageDraw, ImageFont, ImageColor
import io
import os
from datetime import datetime

import shutil
from os import getcwd

from app.infra.sqlalchemy.dao.queries_geral import inserir_relatorio_rcm
from fastapi.responses import StreamingResponse, Response
import io

router = APIRouter()

@router.post("/apiptai/rcmkpmg")
async def salvar_relatorio_rcm(
    nome: str = Form(...),
    data: str = Form(...),
    constatacoes: str = Form(...),
    recomendacoes: str = Form(...),
    file: UploadFile = File(...)
):
    # Lê o conteúdo binário do PDF
    pdf_bytes = await file.read()

    # Chama a função para inserir no PostgreSQL
    try:
        novo_id = await inserir_relatorio_rcm(nome, data, constatacoes, recomendacoes, pdf_bytes)
        return {
            "status": "ok",
            "id_inserido": novo_id,
            "mensagem": "Relatório RCM salvo com sucesso no banco."
        }
    except Exception as e:
        return {
            "status": "erro",
            "detalhe": str(e)
        }
        
@router.get("/apiptai/rcmkpmg/{relatorio_id}")
async def get_relatorio_rcm(relatorio_id: int):
    query = """
    SELECT pdf_file, nome, data, constatacoes, recomendacoes
    FROM rcm.rcm_relatorios
    WHERE id = $1;
    """
    resultado = await execute_query(query, relatorio_id, return_one=True)
    if not resultado:
        return {"erro": "Relatório não encontrado"}
    
    pdf_bytes = resultado['pdf_file']  # isto deve ser um campo BYTEA (bytes)

    # Abordagem 1: Retornar de uma vez só usando Response
    return Response(content=pdf_bytes, media_type="application/pdf")

    # Abordagem 2: Usar StreamingResponse
    # return StreamingResponse(
    #     io.BytesIO(pdf_bytes),
    #     media_type="application/pdf"
    # )
