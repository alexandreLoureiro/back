<div class="main-container">
  <div class="container">
    <div class="floating-feedback-buttons">
      <p-button icon="pi pi-thumbs-up-fill" rounded text (click)="onFeedback('useful')"></p-button>
      <p-button icon="pi pi-thumbs-down-fill" severity="secondary" rounded text
        (click)="onFeedback('notUseful')"></p-button>
    </div>

    <p-toast></p-toast>

    <p-panel *ngIf="!loading" [toggleable]="true" [collapsed]="isPanelCollapsed">
      <ng-template #header>
        <div class="flex items-center justify-between w-full">
          <!-- Esquerda: Título e Avatar -->
          <div class="flex items-center gap-2" style="align-items: center;">
            <p-avatar image="assets/assistente.png" shape="circle" size="xlarge"></p-avatar>
            <span class="font-bold pl-10 align-middle" style="display: inline-block; vertical-align: middle;">
              <span *ngIf="!contexto_inicial">Analisando o objeto de auditoria
                <br>
                <span style="margin-left: 8px;">{{ currentLoadingMessage }}</span>
              </span>

              <span *ngIf="dynamicObject && contexto_inicial">Agênte selecionado:
                <span *ngIf="dynamicObject['agente'] =='exterior'">
                  Exterior por trabalhos especifico
                </span>
                <span *ngIf="dynamicObject['agente'] =='exteriorconsolidado'">
                  Exterior visão consolidada por exercico
                </span>
                <span *ngIf="dynamicObject['agente'] =='atb'">
                  GA Mefis - teste chat para o indicador planejamento de trabalhos
                  <br>
                  <br>

                  <p-tag severity="success" value="Exemplo de perguntas para os testes:" />
                   <br> 

                  <div class="card flex justify-center">
                    <p-virtualscroller [items]="items_atb_pln" [itemSize]="50" scrollHeight="200px" styleClass="border border-surface" [style]="{ width: '800px', height: '200px' }">
                      <ng-template #item let-item let-options="options">
                        <div class="flex items-center p-1" [ngClass]="{ 'bg-surface-100 dark:bg-surface-700': options.odd }" >
                          {{ item.question }}
                        </div>
                      </ng-template>
                    </p-virtualscroller>
                  </div>
                </span>
              </span> 
             </span>
          </div>
        </div>
      </ng-template>
      <ng-template #footer>
      </ng-template>
      <ng-template #icons>
      </ng-template>
      <div *ngIf="dynamicObject['agente'] =='exterior' && contexto_inicial">
        Trabalho nº {{dynamicObject['param2']}}
        <br>
        Possui as informações sobre o relatório, principais constatações e as respectivas evidências e reconendações
        vinculadas.

      </div>

      <div *ngIf="dynamicObject['agente'] =='exteriorconsolidado' && contexto_inicial">
        Prefixo GA {{dynamicObject['param2']}}, ano do exercicio analisado: {{dynamicObject['param3']}}
        <br>
        Este chat responde perguntas sobre os pontos consolidados dos trabalhos desta GA/Exercício. <br>
        Se necessitar de detalhes específicos de algum Trabalho de Auditoria (por ex.: recomendações detalhadas, 
        justificativa, relatórios completos), é preciso acessar o agente específico do respectivo trabalho, 
        pois lá há todo o relatório em profundidade.

      </div>

      <div *ngIf="dynamicObject['agente'] =='atb' && contexto_inicial">
        <br>
        Iniciando teste de chat do indicador ATB planejamento de trabalhos de auditoria

      </div>

    </p-panel>
    <!--
    <div class="chat-container">
      <div class="messages" #messageContainer>
        <div *ngFor="let msg of messages" [ngClass]="{
            'user-message': msg.role === 'user',
            'assistant-message': msg.role === 'assistant'
          }">
          <p-card styleClass="message-card" [style]="{ 'margin-bottom': '1rem', 'white-space': 'pre-wrap' }">
            <ng-container>
              <span *ngIf="msg.role === 'user'">
                <i class="pi pi-user" style="margin-right: .5rem;"></i>
                Você:
              </span>
              <span *ngIf="msg.role === 'assistant'">
                <i class="pi pi-android" style="margin-right: .5rem;"></i>
                Assistente:
              </span>
              <br />
            
              <span>{{ msg.content }}</span>
            </ng-container>
          </p-card>
         </div>
      </div>
   
      <div class="loading-indicator" *ngIf="loading">
        <p-progressSpinner></p-progressSpinner>
        <span style="margin-left: 8px;">{{ currentLoadingMessage }}</span>
      </div>
    
      <div class="input-bar">
        <textarea #textarea [(ngModel)]="userMessage" placeholder="Digite sua mensagem..."
          (input)="adjustTextArea($event)" (keydown)="handleEnterKey($event)" rows="1" class="chat-textarea"></textarea>
  
        <div class="input-action">
          <i class="pi pi-send" (click)="sendMessage()"
            [ngClass]="{ 'disabled':  userMessage.trim().length === 0 || loading }"></i>
        </div>
      </div>
    </div>
    <br>
  -->



    <div class="chat-container">
      <!-- Alerta caso nenhum trabalho esteja selecionado -->
      <p-message *ngIf="!contexto_inicial" severity="warn"
        text="Aguarde, analisando o objeto de auditoria."
        [style]="{ 'margin-bottom': '1rem' }"></p-message>

      <!-- Mensagens do Chat -->
      <div class="messages" #messageContainer>
        <div *ngFor="let msg of messages" [ngClass]="{
          'user-message': msg.role === 'user',
          'assistant-message': msg.role === 'assistant'
        }" class="message-item">
          <!-- Mensagem do Usuário ou Assistente -->
          <p-card styleClass="message-card" [style]="{ 'margin-bottom': '1rem', 'white-space': 'pre-wrap' }">
            <ng-container>
              <span *ngIf="msg.role === 'user'">
                <!--    <i class="pi pi-user" style="margin-right: .5rem;"></i>-->
                <p-avatar *ngIf="msg.role === 'user'"
                  [image]="'https://humanograma.intranet.bb.com.br/avatar/' + usuario?.chaveFuncionario" class="mr-2"
                  size="large" shape="circle"></p-avatar>
              </span>

              <span *ngIf="msg.role === 'assistant'">
                <p-avatar *ngIf="msg.role === 'assistant'" image="assets/assistente.png" class="mr-2" size="large"
                  shape="circle"></p-avatar>
              </span>
              <br />
              <span>{{ msg.content }}</span>
            </ng-container>
          </p-card>
        </div>
      </div>

      <!-- Indicador de carregamento enquanto espera resposta -->
      <div *ngIf="loading" class="loading-indicator">
        <!-- Novo indicador de "digitando" -->
        <div class="typing-indicator">
          <span class="dot"></span>
          <span class="dot"></span>
          <span class="dot"></span>
        </div>
        <span style="margin-left: 8px;">{{ currentLoadingMessage }}</span>
      </div>

      <!-- Barra de input e botão de enviar -->
      <div class="input-bar">
        <textarea #textarea [(ngModel)]="userMessage" placeholder="Digite sua mensagem..."
          (input)="adjustTextArea($event)" (keydown)="handleEnterKey($event)" rows="1" class="chat-textarea"></textarea>

        <div class="input-action">
          <i class="pi pi-send" (click)="sendMessage()" [ngClass]="{
            'disabled': userMessage.trim().length === 0 || loading || !contexto_inicial
          }"></i>
        </div>
      </div>
    </div>
  </div>
  <footer class="footer mt-auto py-2 bg-light"> <!-- Reduz o padding vertical -->
    <div class="container">
      <div class="row">
        <div class="col text-right">
          <i>GA MEFIS - 2025</i>
        </div>
      </div>
    </div>
  </footer>
</div>

<p-dialog header="Nos ajude a melhorar" [modal]="true" [(visible)]="displayFeedbackDialog" [style]="{ width: '50rem' }">
  <div class="flex flex-column gap-4 mb-4" style="padding: 0 10px;">
    <p-floatlabel style="width: 100%;">
      <textarea pTextarea id="over_label" [(ngModel)]="feedbackText" rows="5" style="resize: none; width: 100%;"
        class="h-full"></textarea>
      <label for="over_label">
        Conte-nos mais sobre sua experiência.<br>
        <small>(campo não obrigatório)</small>
      </label>
    </p-floatlabel>
  </div>

  <div class="flex justify-end gap-2" style="padding: 0 10px;">
    <p-button label="Cancelar" severity="secondary" (click)="closeDialog()"></p-button>
    <p-button label="Enviar" (click)="submitFeedback()"></p-button>
  </div>
</p-dialog>

import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MessageService } from 'primeng/api';
import { ServicoLLMService } from '../servico-llm.service';
import { ToastModule } from 'primeng/toast';
import { AccordionModule } from 'primeng/accordion';
import { CardModule } from 'primeng/card';
import { ProgressSpinnerModule } from 'primeng/progressspinner';
import { MessageModule } from 'primeng/message';
import { TabsModule } from 'primeng/tabs';
import { BadgeModule } from 'primeng/badge';
import { ScrollPanelModule } from 'primeng/scrollpanel';
import { AvatarModule } from 'primeng/avatar';
import { PanelModule } from 'primeng/panel';
import { ButtonModule } from 'primeng/button';
import { MenuModule } from 'primeng/menu';
import { Dialog } from 'primeng/dialog';
import { TextareaModule } from 'primeng/textarea';
import { FloatLabel } from 'primeng/floatlabel';
import { ScrollerModule } from 'primeng/scroller';
import { Tag } from 'primeng/tag';

import { FeedbackPayload } from '../models/models';

import { MensagemPayloadGeral } from '../models/models';

@Component({
  selector: 'app-chatgeral',
  imports: [
    CommonModule, RouterModule, FormsModule, ToastModule, AccordionModule, CardModule,  ProgressSpinnerModule, MessageModule, TabsModule, BadgeModule,
    ScrollPanelModule, AvatarModule, PanelModule, ButtonModule, MenuModule, Dialog, TextareaModule, FloatLabel, ScrollerModule, Tag
  ],
  templateUrl: './chatgeral.component.html',
  styleUrls: ['./chatgeral.component.css'],
  providers: [MessageService],
})
export class ChatgeralComponent implements OnInit {

  // http://localhost:4200/chatgeral/agente/exterior/param1/relindividual/param2/51127
  //http://localhost:4200/chatgeral/agente/exteriorconsolidado/param1/relconsolidado/param2/9646/param3/2024

  params: string[] = [];
  dynamicObject: { [key: string]: string } = {}; // Objeto dinâmico criado a partir dos params
  usuario: any;

  isPanelCollapsed: boolean = false;
  nrTrabalho: any
  trabalhoDetalhes: any; // Detalhes do trabalho
  sessionId: string = '';   
  messages: Array<{ role: string; content: string }> = []; // Histórico de mensagens
  userMessage: string = ''; 
  loading: boolean = false; // Indicador de carregamento
  currentLoadingMessage: string = ''; // Mensagem de carregamento atual
  loadingMessages: string[] = [
    'Lendo o objetivo do trabalho...',
    'Analisando a justificativa do trabalho...',
    'Eventos de riscos avaliados e as respectivas notas...',
    'Estudando o relatório de auditoria...',
    'Lendo as principais constatações do relatório...',
    'Obtendo os vínculos das ocorrências e evidências de achados de auditoria...',
    'Recuperando recomendações vinculadas ao trabalho...'
  ];

  loadingMessagesExtCons: string[] = [
    'Atenção, sou um agente que possui apenas os dados consolidados...',
    'Lendo os pontos consolidados dos trabalhos desta GA/Exercício...',
    'Analisando os princiapis pontos do trabalho...',
    'Analisando os principais riscos avaliados e as respectivas notas...',
    'Estudando os principais pontos do relatório de auditoria...',
    'Lendo as principais constatações do relatório...',
    'Atenção, sou um agente que possui apenas os dados consolidados...'
  ];

  loadingMessagesATBpln: string[] = [
    'Indicador planejamento de trabalhos...',
    'Lendo definição do indicador ...',
    'Aprendendo a descrição das tabelas e os valores registrados...'
   ];

   items_atb_pln = [
    { question: '1) Teve algum trabalho que não está na relação do paint e está na relação de trabalhos do indicador?' },
    { question: '2) Teve algum trabalho cancelado que estava no orçado no indicador?' },
    { question: '3) Teve algum trabalho que no planejamento do paint a previsão de conclusão era para 2025 e agora passou para 2026?' },
    { question: '4) Quais trabalhos estão com o status em replanejamento?' },
    { question: '5) Quais trabalhos estão com o status em cancelamento?' },
    { question: '6) Esses trabalhos com status em cancelamento, qual o risco para o cumprir o indicador?' }
  ];

  loadingInterval: any;

  displayFeedbackDialog: boolean = false; // Controla a visibilidade do dialog
  feedbackText: string = ''; // Armazena o feedback do usuário
  dialogHeader: string = ''; // Cabeçalho do dialog
  feedbackType: string = ''; // Armazena se foi "useful" ou "notUseful"


   // Referências ao container das mensagens e ao textarea (para rolagem e ajuste de altura)
   @ViewChild('messageContainer') messageContainer!: ElementRef;
   @ViewChild('textarea') textarea!: ElementRef;
  objetoAudDetalhes: any;
  contexto_inicial: boolean=false;

  constructor(
              private route: ActivatedRoute,
              private servicoLLM: ServicoLLMService,
              private messageService: MessageService
              ) {}

  ngOnInit(): void {
    this.servicoLLM.user$.subscribe((user) => {
      this.usuario = user;
    });

    // Cria uma nova sessão ao carregar o componente
    this.servicoLLM.createSession().subscribe({
      next: (response) => {
        this.sessionId = response.sessionId;
      },
      error: (err) => {
        console.error('Erro ao criar sessão:', err);
      },
    });
  

    this.route.params.subscribe((params) => {
      const wildcard = params['wildcard']; // Ex: "nome/joao/idade/25"
      if (wildcard) {
        this.params = wildcard.split('/'); // Ex: ['nome', 'joao', 'idade', '25']
        
        // Criar o objeto dinâmico
        this.dynamicObject = this.createDynamicObject(this.params);
 
        if (this.dynamicObject){
          this.startLoadingMessages();
        }
        
        // Acessar valores específicos
        const agente = this.dynamicObject['agente'];
        const finalidade = this.dynamicObject['finalidade'];
        const param1 = this.dynamicObject['param1'];
        const param2 = this.dynamicObject['param2'];

        // Enviar os dados ao backend
        this.servicoLLM.servicosAgentes(this.dynamicObject).subscribe({
          next: (response) => {
            console.log('response: ', response)
            this.objetoAudDetalhes = response[0]; // Detalhes do trabalho
        this.showNotification('info', 'Objeto auditoria selecionado', `Iniciando análise do trabalho ${this.dynamicObject['agente'] }`);
  
        // Reseta a sessão no backend
        this.servicoLLM.resetSession(this.sessionId).subscribe({
          next: () => {
            // Reenvia a role do user e assistant vinculadas ao trabalho
            
            this.servicoLLM.sendMessage(
              this.sessionId,
              '',
              response[0].role_user,
              response[0].role_assistant
            ).subscribe({
              next: () => {
                // Exibe a notificação de sucesso e fecha o painel
                this.showNotification('success', 'Sessão Inicializada', 'Pronto para interagir.');
                this.isPanelCollapsed = true; // Fecha o painel automaticamente
                this.loading = false;
                this.contexto_inicial = true;
                this.stopLoadingMessages();
              },
              error: (err) => {
                console.error('Erro ao inicializar sessão:', err);
                this.showNotification('error', 'Erro', 'Erro ao inicializar sessão.');
                this.loading = false;
                this.stopLoadingMessages();
              },
            });
          },
          error: (err) => {
            console.error('Erro ao resetar a sessão:', err);
            this.showNotification('error', 'Erro', 'Erro ao resetar sessão.');
            this.loading = false;
            this.stopLoadingMessages();
          },
        });
          },
          error: (err) => {
            console.error('Erro ao enviar dados ao backend:', err);
          }
        });
      } else {
        console.log('Nenhum parâmetro extra na rota.');
      }
    });
  }

  // Método para criar um objeto dinâmico
  createDynamicObject(params: string[]): { [key: string]: string } {
    const obj: { [key: string]: string } = {};
    for (let i = 0; i < params.length; i += 2) {
      const key = params[i]; // Pega a chave
      const value = params[i + 1]; // Pega o valor
      if (key && value) {
        obj[key] = value; // Adiciona ao objeto
      }
    }
    return obj;
  }

  // http://localhost:4200/chatgeral/agente/exterior/finalidade/relexercicio/param1/47487

  


  // generico

  showNotification(severity: string, summary: string, detail: string) {
    this.messageService.add({ severity, summary, detail });
  }

  onTrabalhoChange_(nr_trabalho: number): void {
    /*
    if (!nr_trabalho) {
      this.showNotification(
        'warn',
        'Seleção de Trabalho',
        'Por favor, selecione um trabalho antes de continuar.'
      );
      return;
    }
    */
    this.isPanelCollapsed = false;
    this.resetMessages();
    this.loading = true;
    this.startLoadingMessages();
  
    // Abrir o painel imediatamente
    
  
    this.servicoLLM.getTrabalhoDetails(nr_trabalho).subscribe({
      next: (response) => {
        this.trabalhoDetalhes = response[0]; // Detalhes do trabalho
        this.showNotification('info', 'Trabalho Selecionado', `Iniciando análise do trabalho ${nr_trabalho}`);
  
        // Reseta a sessão no backend
        this.servicoLLM.resetSession(this.sessionId).subscribe({
          next: () => {
            // Reenvia a role do user e assistant vinculadas ao trabalho
            this.servicoLLM.sendMessage(
              this.sessionId,
              '',
              response[0].role_user,
              response[0].role_assistant
            ).subscribe({
              next: () => {
                // Exibe a notificação de sucesso e fecha o painel
                this.showNotification('success', 'Sessão Inicializada', 'Pronto para interagir.');
                this.isPanelCollapsed = true; // Fecha o painel automaticamente
                this.loading = false;
                this.stopLoadingMessages();
              },
              error: (err) => {
                console.error('Erro ao inicializar sessão:', err);
                this.showNotification('error', 'Erro', 'Erro ao inicializar sessão.');
                this.loading = false;
                this.stopLoadingMessages();
              },
            });
          },
          error: (err) => {
            console.error('Erro ao resetar a sessão:', err);
            this.showNotification('error', 'Erro', 'Erro ao resetar sessão.');
            this.loading = false;
            this.stopLoadingMessages();
          },
        });
      },
      error: (err) => {
        console.error('Erro ao carregar detalhes do trabalho:', err);
        this.showNotification('error', 'Erro', 'Erro ao carregar detalhes do trabalho.');
        this.loading = false;
        this.stopLoadingMessages();
      },
    });
  }

   
  adjustTextArea(event: Event): void {
    const textarea = event.target as HTMLTextAreaElement;
    if (textarea) {
      textarea.style.height = 'auto';
      textarea.style.height = `${textarea.scrollHeight}px`;
    }
  }

  stopLoadingMessages(): void {
    clearInterval(this.loadingInterval);
    this.currentLoadingMessage = '';
  }

  sendMessage(): void {
    const trimmedMessage = this.userMessage.trim();
  
    if (!trimmedMessage) {
      this.showNotification('warn', 'Atenção', 'Digite uma mensagem antes de enviar.');
      return;
    }
  
    // Adiciona a mensagem do usuário ao histórico
    this.messages.push({ role: 'user', content: trimmedMessage });
  
    // Limpa o campo de input e redefine a altura do textarea
    this.userMessage = '';
    this.resetTextAreaHeight();
  
    this.loading = true;
    this.showNotification('info', 'Enviando', 'Sua mensagem está sendo processada.');
  
    // Envia a mensagem ao backend
    this.servicoLLM.sendMessage(this.sessionId, trimmedMessage).subscribe({
      next: (response) => {
        // Adiciona a resposta do assistente ao histórico
        this.messages.push({ role: 'assistant', content: response.answer });
        this.loading = false;
        this.showNotification('success', 'Sucesso', 'Mensagem enviada com sucesso.');
        this.scrollToBottom();
  
        // Salvar mensagens no backend sem bloquear a interface

        
        const mensagemPayloadGeral: MensagemPayloadGeral = {
          objeto_auditoria: this.objetoAudDetalhes.objeto_auditoria ? this.objetoAudDetalhes.objeto_auditoria.toString() : '', // ou um valor padrão
          matricula: this.usuario?.chaveFuncionario,
          sessao: this.sessionId,
          remetente: 'usuario',
          conteudo: trimmedMessage
      };

        this.servicoLLM.salvarChatGeral(mensagemPayloadGeral).subscribe({
          next: (res) => console.log('Mensagem do usuário salva:', res),
          error: (err) => console.error('Erro ao salvar mensagem do usuário:', err)
        });
  /*
        const payloadAssistente = {
          numero_trabalho: this.nrTrabalho,
          matricula: this.usuario?.chaveFuncionario,
          sessao: this.sessionId,
          remetente: 'assistente',
          conteudo: response.answer
        };
        this.servicoLLM.salvarMensagem(payloadAssistente).subscribe({
          next: (res) => console.log('Resposta do assistente salva:', res),
          error: (err) => console.error('Erro ao salvar resposta do assistente:', err)
        });
        */
      },
      error: (err) => {
        console.error('Erro ao processar mensagem:', err);
        this.loading = false;
        this.showNotification('error', 'Erro', 'Erro ao processar sua mensagem. Tente novamente mais tarde.');
        this.messages.push({
          role: 'assistant',
          content: 'Erro ao processar sua mensagem. Por favor, tente novamente mais tarde.'
        });
        this.scrollToBottom();
      },
    }); 
  }
  
  
 

  handleEnterKey(event: KeyboardEvent): void {
    if (event.key === 'Enter') {
      event.preventDefault();
      this.sendMessage();
      this.resetTextAreaHeight();
    }
  }

  resetTextAreaHeight(): void {
    if (this.textarea) {
      const textareaEl = this.textarea.nativeElement as HTMLTextAreaElement;
      textareaEl.style.height = 'auto';
    }
  }

  scrollToBottom(): void {
    if (this.messageContainer) {
      this.messageContainer.nativeElement.scrollTop =
        this.messageContainer.nativeElement.scrollHeight;
    }
  }

  resetMessages(): void {
    this.messages = [];
  }
  startLoadingMessages(): void {
    let index = 0;
    if (this.dynamicObject['agente'] =='exteriorconsolidado') {
        this.loadingMessages = this.loadingMessagesExtCons;
    } else if (this.dynamicObject['agente'] =='atb'){
        this.loadingMessages = this.loadingMessagesATBpln;
    }

    this.currentLoadingMessage = this.loadingMessages[index];
    this.loadingInterval = setInterval(() => {
      index = (index + 1) % this.loadingMessages.length;
      this.currentLoadingMessage = this.loadingMessages[index];
    }, 3000);
  }

  replaceNewLines(content: string | null | undefined): string {
    if (!content) {
      return '';
    }
    return content.replace(/\n/g, '<br>');
  }

  // Método acionado ao clicar em Curtir ou Não Curtir
  onFeedback(type: string): void {
    this.feedbackType = type;
    this.dialogHeader = type === 'useful' ? 'Por que você gostou?' : 'Por que você não gostou?';
    this.displayFeedbackDialog = true; // Abre o dialog
  }

  // Envia o feedback para o backend
  submitFeedback(): void {
    // Monta o payload com todas as informações
    const feedbackData: FeedbackPayload = {
      texto: this.feedbackText,
      matricula: this.usuario?.chaveFuncionario || '',
      trabalho: 0,
      sessao: this.sessionId,
      feedback: this.feedbackType,
      agente: this.dynamicObject['agente'] ,
      objetoaudt: this.dynamicObject['param2'] 
    //  data: new Date().toISOString()
    };
  
    // Envia o feedback usando o serviço
    this.servicoLLM.salvarFeedback(feedbackData).subscribe({
      next: (response) => {
        this.showNotification('success', 'Obrigado!', 'Seu feedback foi enviado com sucesso.');
      },
      error: (error) => {
        console.error('Erro ao enviar feedback:', error);
        this.showNotification('error', 'Erro', 'Não foi possível enviar seu feedback. Tente novamente mais tarde.');
      },
      complete: () => {
        // Fecha o diálogo e limpa o feedback após a conclusão
        this.closeDialog();
      }
    });
  }
  

  // Fecha o dialog e limpa o campo de feedback
  closeDialog(): void {
    this.displayFeedbackDialog = false;
    this.feedbackText = '';
  }

}

html, body {
  height: 100%;
  margin: 0;
}

.main-container {
  display: flex;
  flex-direction: column;
  min-height: 100vh; /* Garante altura mínima da viewport */
  position: relative;
}


.chat-container {
  flex: 1;
  display: flex;
  flex-direction: column;
  width: 100%;
  max-width: 100%;
  border: 1px solid #ccc;
  border-radius: 10px;
  padding: 1rem;
  margin: 0.5rem auto;
  background-color: #2c2c2c;
  color: #fff;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  overflow: hidden; /* Impede que o conteúdo transborde */
}

/* Ajuste para o footer */
.footer {
  flex-shrink: 0;
  padding: 0.5rem 0; /* Reduz o padding vertical */
  background-color: #f8f9fa !important;
  z-index: 1000;
}

.footer i {
  font-size: 0.75rem !important; /* Reduz o tamanho do texto */
}


  
  .messages {
    flex: 1;
    overflow-y: auto; /* Permite rolagem */
    padding-right: 1rem;
    margin-bottom: 0.5rem;
  }
  
  /* Mensagens alinhadas à direita (usuário) */
  .user-message {
    flex-direction: row-reverse;
    text-align: right;
  }
  
  /* Mensagens alinhadas à esquerda (assistente) */
  .assistant-message {
    flex-direction: row;
    text-align: left;
  }
  
  .message-card {
    max-width: 70%;
    background: #444;
    color: #fff;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 10px;
  }
  
  /* Avatar com espaçamento */
  .p-avatar {
  flex-shrink: 0;
  }
  
  /* Indicador de carregamento */
  .loading-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 1rem 0;
  }
  
  /* Barra de entrada e ícones */
  .input-bar {
    display: flex;
    align-items: center;
    padding: 0.5rem;
    background-color: #3a3a3a;
    border-radius: 20px;
    margin-top: 1rem;
  }
  
  .input-icons {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .input-icons i {
    font-size: 1.2rem;
    cursor: pointer;
    color: #9e9e9e;
  }
  
  .chat-input {
    flex: 1;
    background: transparent;
    border: none;
    outline: none;
    color: #fff;
    padding: 0 0.5rem;
  }
  
  .chat-input::placeholder {
    color: #9e9e9e;
  }
  
  .input-action i {
    font-size: 1.5rem;
    color: #4caf50;
    cursor: pointer;
    transition: color 0.2s;
  }
  
  .input-action i.disabled {
    color: #9e9e9e;
    pointer-events: none;
  }
  
  
  .chat-input-container {
    display: flex;
    align-items: center;
    background-color: #2c2c2c; /* Fundo escuro */
    border-radius: 20px; /* Bordas arredondadas */
    padding: 0.5rem 1rem;
    gap: 0.5rem;
    color: #fff;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); /* Sombra leve */
  }
  
  .input-icons {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .input-icons i {
    font-size: 1.2rem;
    color: #9e9e9e; /* Cor dos ícones */
    cursor: pointer;
  }
  
  
  .message-item {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .chat-textarea {
    flex: 1;
    resize: none;
    background: transparent;
    border: none;
    outline: none;
    color: #fff;
    font-size: 1rem;
    font-family: 'Roboto', sans-serif;
    padding: 0 0.5rem;
  }
  
  .chat-textarea::placeholder {
    color: #9e9e9e;
  }
  
  .input-action i {
    font-size: 1.5rem;
    color: #4caf50;
    cursor: pointer;
    transition: color 0.2s;
  }
  
  .input-action i.disabled {
    color: #9e9e9e;
    pointer-events: none;
  }
  
  .chat-textarea {
    min-height: 40px;
    max-height: 200px; /* Limita a expansão */
    overflow-y: auto; /* Adiciona barra de rolagem se o conteúdo exceder o máximo */
  }
  .dropdown-container {
    margin: 1rem 0;
  }
  .warning {
    margin-bottom: 1rem;
  }
  
  
  /* Personalizar o estilo do título */
  .text-title {
    color: #164d37; /* Azul escuro */
    font-weight: 600; /* Negrito */
    font-size: 2.2rem; /* Tamanho ajustado */
  }
  
  .text-link {
    text-decoration: none;
    color: #0d6efd;
    font-weight: bold;
  }
  
  .text-link:hover {
    text-decoration: underline;
  }
  
  .pi-download {
    cursor: pointer;
    transition: color 0.2s ease;
  }
  
  .pi-download:hover {
    color: #0056b3;
  }
  
  /* Espaçamento entre o dropdown e outros elementos */
  .dropdown-container {
    margin-bottom: 0.5rem; /* Adiciona espaço abaixo */
  }
  /* Estilo para borda e sombra */
  .dropdown-container {
    display: flex; /* Coloca os elementos na mesma linha */
    align-items: center; /* Centraliza verticalmente */
    padding: 1rem;
    border: 1px solid #dee2e6; /* Borda cinza clara */
    border-radius: 8px; /* Borda arredondada */
    background-color: #f8f9fa; /* Fundo leve */
    box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.1); /* Sombra suave */
    gap: 1rem; /* Espaçamento entre o dropdown e o texto */
  }
  
  /* Estilo adicional para responsividade */
  @media (max-width: 768px) {
    .dropdown-container {
      flex-wrap: wrap; /* Permite quebra em telas pequenas */
      margin-bottom: 1rem;
      padding: 0.8rem;
      gap: 0.5rem; /* Reduz o espaço entre os elementos */
    }
  }
  
  /* Estilo do texto "Trabalho selecionado" */
  .selected-work {
    color: #495057; /* Cinza escuro */
    font-size: 1rem; /* Tamanho do texto */
    padding: 0.3rem 0.8rem; /* Ajusta o espaçamento interno */
    border: 1px solid #dee2e6; /* Borda leve */
    border-radius: 8px; /* Bordas arredondadas */
  }
  
  .headline-box {
    border-left: 5px solid #007bff; /* Cor da borda lateral */
    padding: 10px;
    margin: 20px 0;
    background-color: #f8f9fa; /* Cor de fundo */
  }
  
  .headline-box h3 {
    margin-top: 0;
    font-size: 1.5rem; /* Tamanho do texto do título */
  }
  
  .headline-box p {
    margin: 0;
    font-size: 1rem; /* Tamanho do texto do parágrafo */
  }
  
  
  /* efeito chat */ 
  
  .typing-indicator {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 40px;
  }
  
  .dot {
  width: 10px;
  height: 10px;
  margin: 0 5px;
  background-color: #00aaff;
  border-radius: 50%;
  animation: typing 1.5s infinite ease-in-out;
  }
  
  .dot:nth-child(2) {
  animation-delay: 0.2s;
  }
  
  .dot:nth-child(3) {
  animation-delay: 0.4s;
  }
  
  @keyframes typing {
  0%, 80%, 100% {
    transform: scale(0);
    opacity: 0.3;
  }
  40% {
    transform: scale(1);
    opacity: 1;
  }
  }
  
  .floating-feedback-buttons {
    position: fixed;
    top: 100px; /* Distância do topo da tela */
    right: -100px; /* Começa fora da tela */
    display: flex;
    flex-direction: row; /* Coloca os botões lado a lado */
    gap: 10px; /* Espaçamento entre os botões */
    z-index: 1000; /* Certifica-se de que está acima de outros elementos */
    animation: slideIn 1.5s ease-out forwards; /* Animação para deslizar para dentro */
  }
  
  .floating-feedback-buttons button {
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3); /* Saliência 3D */
    border-radius: 50px;
    width: 150px;
    height: 50px;
    font-weight: bold;
    transform: scale(0.9); /* Ligeiramente menor */
    transition: transform 0.3s ease, box-shadow 0.3s ease; /* Transição ao passar o mouse */
  }
  
  .floating-feedback-buttons button:hover {
    transform: scale(1.05); /* Aumenta ligeiramente no hover */
    box-shadow: 0px 6px 15px rgba(0, 0, 0, 0.4); /* Aumenta a sombra no hover */
  }
  
  /* Animação de entrada */
  @keyframes slideIn {
    0% {
      right: -150px; /* Fora da tela */
      opacity: 0; /* Invisível */
    }
    100% {
      right: 50px; /* Posição final */
      opacity: 1; /* Visível */
    }
  }
  
  /* Ajuste para telas pequenas (celulares) */
  @media (max-width: 768px) {
    .floating-feedback-buttons {
      right: -80px; /* Começa fora da tela */
      top: 70px; /* Ajuste para telas pequenas */
      animation: slideIn 1.5s ease-out forwards;
    }
  }
  
  /* Ajuste para telas grandes (monitores maiores) */
  @media (min-width: 1200px) {
    .floating-feedback-buttons {
      right: -200px; /* Começa mais longe */
      top: 120px; /* Ajusta o topo */
      animation: slideIn 2s ease-out forwards; /* Transição mais longa */
    }
  }
  

