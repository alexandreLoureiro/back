elif data.get("agente") == 'rcmkpmg' and data.get("param1") == 'consolidado':
    print('>>>>>> rcmkpmg consolidado <<<<<<')
    query = f"""
        SELECT DISTINCT
            periodo_apuracao,
            relatorios_periodo,
            sumario_executivo_rel,
            racional_sumario_rel,
            sumario_executivo_per,
            racional_sumario_per,
            CONCAT(
                'Com base nos relatórios de auditoria externa do período "', periodo_apuracao, '", 
                estou à disposição para responder suas dúvidas sobre os pontos apresentados no sumário executivo.
                Por favor, solicite qualquer informação sobre os achados de auditoria deste período.'
            ) AS role_user,
            CONCAT(
                'Olá! Estou pronto para responder suas dúvidas sobre os relatórios de auditoria externa do período ', 
                periodo_apuracao, '. Posso fornecer informações detalhadas sobre os pontos identificados no sumário executivo.
                Como posso ajudar?'
            ) AS role_assistant
        FROM 
            rcm.rcm_kpmg_relatorios 
        WHERE 
            periodo_apuracao = '{data.get("param2")}';
    """

// No seu component.ts
export class RcmKpmgConsolidadoComponent implements OnInit {
  dados: any;
  sessionId: string = uuidv4(); // Supondo que você esteja usando uuid para gerar IDs de sessão
  dynamicObject = {
    agente: "rcmkpmg",
    param1: "consolidado",
    param2: "" // Será preenchido com o período selecionado
  };
  
  periodos: string[] = []; // Lista de períodos disponíveis
  periodoSelecionado: string = "";
  
  constructor(private servicoLLM: ServicoLLMService) { }
  
  ngOnInit() {
    this.carregarPeriodos();
  }
  
  carregarPeriodos() {
    // Endpoint para carregar a lista de períodos disponíveis
    this.servicoLLM.getPeriodosApuracao().subscribe({
      next: (response) => {
        this.periodos = response;
        if (this.periodos.length > 0) {
          this.periodoSelecionado = this.periodos[0];
          this.carregarDadosConsolidados(this.periodoSelecionado);
        }
      },
      error: (err) => {
        this.showNotification('error', 'Erro', 'Erro ao carregar períodos de apuração');
      }
    });
  }
  
  carregarDadosConsolidados(periodo: string) {
    this.dynamicObject.param2 = periodo;
    this.servicoLLM.servicosAgentes(this.dynamicObject).subscribe({
      next: (response) => {
        console.log('response: ', response);
        this.dados = response[0];
        this.showNotification('info', 'Dados carregados', `Análise consolidada do período ${periodo} carregada com sucesso`);
        
        // Reseta a sessão no backend
        this.servicoLLM.resetSession(this.sessionId).subscribe();
      },
      error: (err) => {
        this.showNotification('error', 'Erro', 'Erro ao carregar dados consolidados');
      }
    });
  }
  
  showNotification(severity: string, summary: string, detail: string) {
    // Implementação do seu serviço de notificação
  }
  
  onPeriodoChange() {
    this.carregarDadosConsolidados(this.periodoSelecionado);
  }
}

